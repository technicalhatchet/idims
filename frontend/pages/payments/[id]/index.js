// src/pages/payments/[id]/index.js import { useState } from 'react'; import { withPageAuthRequired } from '@auth0/nextjs-auth0/client'; import Head from 'next/head'; import Link from 'next/link'; import { useRouter } from 'next/router'; import { FaUndo, FaReceipt } from 'react-icons/fa'; import DashboardLayout from '../../components/layouts/DashboardLayout'; import PaymentDetails from '@/components/payments/PaymentDetails'; import LoadingSpinner from '@/components/ui/LoadingSpinner'; import ErrorAlert from '../../components/ui/ErrorAlert'; import Modal from '@/components/ui/Modal'; import RefundForm from '@/components/payments/RefundForm'; import { usePayment, usePaymentMutations } from '@/hooks/usePayments'; import { useAuthRedirect } from '../../hooks/useAuthRedirect';  function PaymentDetail() {   const router = useRouter();   const { id } = router.query;   const [showRefundModal, setShowRefundModal] = useState(false);      // Check authorization (only managers and admins)   useAuthRedirect({ allowedRoles: ['admin', 'manager'] });    // Fetch payment details   const {      data: payment,      isLoading,     error,     refetch   } = usePayment(id);    // Payment mutations   const {      refundPayment,      isLoading: isMutating    } = usePaymentMutations();      const handleRefundSubmit = async (refundData) => {     try {       await refundPayment({         id: payment.id,         amount: refundData.amount,         reason: refundData.reason       });              setShowRefundModal(false);       refetch();     } catch (error) {       console.error('Error processing refund:', error);       throw error;     }   };    if (isLoading) {     return (       <div className="px-4 py-6">         <LoadingSpinner />       </div>     );   }    if (error) {     return (       <div className="px-4 py-6">         <ErrorAlert            message="Failed to load payment details"            onRetry={refetch}         />       </div>     );   }    return (     <>       <Head>         <title>{`Payment ${payment.payment_number} | Service Business Management`}</title>       </Head>        <div className="px-4 py-6">         {/* Header */}         <div className="flex flex-col md:flex-row justify-between md:items-center mb-6">           <div>             <div className="flex items-center">               <h1 className="text-2xl font-bold mr-3">                 Payment: {payment.payment_number}               </h1>               <span className={`px-2 py-1 rounded-full text-xs font-medium ${                 payment.status === 'success' ? 'bg-green-100 text-green-800' :                  payment.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :                  payment.status === 'failed' ? 'bg-red-100 text-red-800' :                  'bg-purple-100 text-purple-800'  // refunded               }`}>                 {payment.status}               </span>             </div>             <p className="text-gray-500 mt-1">Amount: ${payment.amount.toFixed(2)}</p>           </div>                      <div className="mt-4 md:mt-0 flex space-x-2">             {payment.status === 'success' && (               <button                 onClick={() => setShowRefundModal(true)}                 className="btn-danger flex items-center"               >                 <FaUndo className="mr-2" />                 Refund               </button>             )}             <button className="btn-outline flex items-center">               <FaReceipt className="mr-2" />               Generate Receipt             </button>           </div>         </div>                  {/* Payment Details */}         <PaymentDetails payment={payment} />                  {/* Refund Modal */}         <Modal           isOpen={showRefundModal}           onClose={() => setShowRefundModal(false)}           title="Process Refund"         >           <RefundForm             payment={payment}             onCancel={() => setShowRefundModal(false)}             onSubmit={handleRefundSubmit}             isSubmitting={isMutating}           />         </Modal>       </div>     </>   ); }  PaymentDetail.getLayout = function getLayout(page) {   return <DashboardLayout>{page}</DashboardLayout>; };  export const getServerSideProps = withPageAuthRequired({
  async getServerSideProps(ctx) {
    return {
      props: {}
    };
  }
});  export default PaymentDetail;