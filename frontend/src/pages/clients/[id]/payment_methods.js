// src/pages/clients/[id]/payment-methods.js import { useState } from 'react'; import { withPageAuthRequired } from '@auth0/nextjs-auth0/client'; import Head from 'next/head'; import Link from 'next/link'; import { useRouter } from 'next/router'; import { FaPlus, FaCreditCard } from 'react-icons/fa'; import DashboardLayout from '@/components/layouts/DashboardLayout'; import PaymentMethodsList from '@/components/payments/PaymentMethodsList'; import PaymentMethodForm from '@/components/payments/PaymentMethodForm'; import LoadingSpinner from '@/components/ui/LoadingSpinner'; import ErrorAlert from '@/components/ui/ErrorAlert'; import Modal from '@/components/ui/Modal'; import Button from '@/components/ui/Button'; import { useClientPaymentMethods, usePaymentMutations } from '@/hooks/usePayments'; import { useClient } from '@/hooks/useClients'; import { useAuthRedirect } from '@/hooks/useAuthRedirect';  function ClientPaymentMethods() {   const router = useRouter();   const { id: clientId } = router.query;   const [showAddModal, setShowAddModal] = useState(false);   const [showDeleteModal, setShowDeleteModal] = useState(false);   const [selectedMethod, setSelectedMethod] = useState(null);      // Authorization - client can view their own, admins/managers can view all   const { user } = useAuthRedirect();      // Fetch client details   const {      data: client,      isLoading: isLoadingClient,     error: clientError   } = useClient(clientId);      // Fetch payment methods   const {      data: paymentMethods,      isLoading: isLoadingMethods,     error: methodsError,     refetch   } = useClientPaymentMethods(clientId);      // Payment method mutations   const {      createPaymentMethod,      deletePaymentMethod,     isLoading: isMutating    } = usePaymentMutations();      const handleAddMethod = async (methodData) => {     try {       await createPaymentMethod({         clientId,         data: methodData       });              setShowAddModal(false);       refetch();     } catch (error) {       console.error('Error creating payment method:', error);       throw error;     }   };      const handleDeleteClick = (method) => {     setSelectedMethod(method);     setShowDeleteModal(true);   };      const handleConfirmDelete = async () => {     if (!selectedMethod) return;          try {       await deletePaymentMethod({         clientId,         paymentMethodId: selectedMethod.id       });              setShowDeleteModal(false);       refetch();     } catch (error) {       console.error('Error deleting payment method:', error);     }   };      const handleSetDefault = async (method) => {     if (method.is_default) return;          try {       // Update method to be default       await createPaymentMethod({         clientId,         data: {           ...method,           is_default: true         }       });              refetch();     } catch (error) {       console.error('Error setting default payment method:', error);     }   };      if (isLoadingClient) {     return (       <div className="px-4 py-6">         <LoadingSpinner />       </div>     );   }      if (clientError) {     return (       <div className="px-4 py-6">         <ErrorAlert message="Failed to load client details" />       </div>     );   }    return (     <>       <Head>         <title>{`${client.company_name || `${client.first_name} ${client.last_name}`} - Payment Methods | Service Business Management`}</title>       </Head>        <div className="px-4 py-6">         {/* Header */}         <div className="mb-6">           <Link href={`/clients/${clientId}`} className="text-blue-600 hover:text-blue-800">             ← Back to Client           </Link>           <div className="flex items-center justify-between mt-4">             <h1 className="text-2xl font-bold">               {client.company_name || `${client.first_name} ${client.last_name}`} - Payment Methods             </h1>             <button               onClick={() => setShowAddModal(true)}               className="btn-primary flex items-center"             >               <FaPlus className="mr-2" />               Add Payment Method             </button>           </div>         </div>                  {isLoadingMethods ? (           <LoadingSpinner />         ) : methodsError ? (           <ErrorAlert              message="Failed to load payment methods"              onRetry={refetch}           />         ) : (           <div className="bg-white shadow rounded-lg p-6">             <PaymentMethodsList                paymentMethods={paymentMethods || []}                onDelete={handleDeleteClick}               onSetDefault={handleSetDefault}             />           </div>         )}                  {/* Add Payment Method Modal */}         <Modal           isOpen={showAddModal}           onClose={() => setShowAddModal(false)}           title="Add Payment Method"         >           <PaymentMethodForm             onCancel={() => setShowAddModal(false)}             onSubmit={handleAddMethod}             isSubmitting={isMutating}           />         </Modal>                  {/* Delete Confirmation Modal */}         <Modal           isOpen={showDeleteModal}           onClose={() => setShowDeleteModal(false)}           title="Delete Payment Method"           actions={             <>               <Button                 variant="outline"                 onClick={() => setShowDeleteModal(false)}                 className="mr-3"               >                 Cancel               </Button>               <Button                 variant="danger"                 onClick={handleConfirmDelete}                 isLoading={isMutating}                 disabled={isMutating}               >                 Delete               </Button>             </>           }         >           <div className="space-y-3">             <p>Are you sure you want to delete this payment method?</p>             {selectedMethod && (               <div className="bg-gray-50 p-3 rounded">                 <p className="font-medium">{selectedMethod.display_name}</p>                 {selectedMethod.type === 'credit_card' && selectedMethod.last_four && (                   <p className="text-sm text-gray-500">Card ending in {selectedMethod.last_four}</p>                 )}               </div>             )}             <p className="text-sm text-red-600">This action cannot be undone.</p>           </div>         </Modal>       </div>     </>   ); }  ClientPaymentMethods.getLayout = function getLayout(page) {   return <DashboardLayout>{page}</DashboardLayout>; };  export const getServerSideProps = withPageAuthRequired();  export default ClientPaymentMethods;